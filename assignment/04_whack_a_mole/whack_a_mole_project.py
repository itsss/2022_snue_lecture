'''
실습파일에 포함된 예제 코드를 참고해서, 아래 코드를 완성하세요.

[Assignment]
다음과 같은 조건의 두더지 게임을 만들어 봅시다. 배포된 코드를 참고해서 빈 칸을 채워보세요.

(1) 2초에 한 번씩 두더지가 등장함. 두더지를 클릭하지 않는 경우 여러 구멍에서 두더지가 나옴
(2) 마우스로 두더지를 클릭하면 두더지가 없어지고 점수가 +1 증가, 게임시간은 매 초마다 +1 증가
(3) 적절한 게임 제한 시간과 목표 점수를 설정하고, 게임 제한 시간이 되었을 때 목표 점수 이상 득점한 경우 성공 출력, 아닌 경우 실패 출력.
'''

# ===========================================================================
# TODO 1. pygame 라이브러리 불러오기: pygame이라는 라이브러리 명이 너무 기니 as라는 예약어로 이름을 pg로 바꾸어서 사용하세요.
import ?????? as ??

# ===========================================================================
# TODO 2. random 라이브러리를 import를 사용해서 불러오세요.
import ??????

# ===========================================================================
# TODO 3. pygame 초기화: pg.init() 으로 pygame을 초기화해 주세요.
pg.????()

# ===========================================================================
# TODO 4. 게임 화면 크기를 지정합니다. 구체적으로 가로(800) X 세로(600) 로 해 주세요.
screen = pg.display.???????((???, ???))

# ===========================================================================
# TODO 6. background_img에 배경화면을 넣으세요. 사이즈는 맞추어져 있으므로 조정은 필요 없습니다.
background_img = pg.?????.????("whack_a_mole.png")

# ===========================================================================
# TODO 7. mole_img에 두더지 이미지를 넣고, 가로(150) X 세로(100) 으로 바꾸어 주세요.
mole_img = pg.?????.????("mole.png")
mole_img = pg.?????????.?????(mole_img, (???, ???))

# 수정하지 마세요.
font = pg.font.SysFont("nanumbarungothic", 30)

# 수정하지 마세요.
mole_pos = [(50,120), (300,120), (550,120), (50,255), (300,255), (550,255), (50,390), (300,390), (550,390)]

# 수정하지 마세요.
running = True
check_time = True

# ===========================================================================
# TODO 8. 게임 제한 시간과 목표 점수를 자유롭게 설정하세요. 각각 30초, 10점을 설정하는 것을 추천드립니다.
limit_time = ??  # 게임 제한 시간
target_score = ??  # 목표 점수
# ===========================================================================

score = 0  # 게임 점수. 수정하지 마세요.

# 두더지 리스트. 수정하지 마세요.
moles = []


while running:

    screen.blit(background_img, background_img.get_rect())

    # ===========================================================================
    # TODO 9. (...) 에 소요시간을 초 단위로 출력해주세요.
    time_text = font.render(str(...), True, (0, 0, 0), None)
    # ===========================================================================
    # TODO 10. 점수를 출력해주세요.
    score_text = font.render(str(...), True, (0, 0, 0), None)

    # ===========================================================================
    # TODO 11. 마우스 버튼 클릭 및 두더지 클릭 감지가 가능하도록 기능을 구현하세요. 세부적으로 다음 기능이 구현되어야 합니다.
    for event in pg.?????.???():
        # ===========================================================================
        # TODO 11-1. 종료 기능: 종료 버튼을 누르면 무한 반복문을 빠져나오는 코드를 작성하여야 합니다.
        if event.type == pg.????:
            running = False

        # ===========================================================================
        # TODO 11-2. 두더지가 클릭되었을 때 두더지를 제거하고 점수를 증가시키세요.
        if event.type == pg.MOUSEBUTTONDOWN:
            for mole in moles:
                if mole.????????????(event.pos):
                    score += 1
                    moles.??????(mole)
                    break

    # ===========================================================================
    # TODO 12. (...) 에 2초 마다 두더지를 생성하도록 적절한 코드를 추가해주세요.
    if (...) % 2 == 0:
        if check_time:
            add_mole = screen.blit(mole_img, random.choice(mole_pos))
            moles.append(add_mole)
            check_time = False
    else:
        check_time = True

    # 두더지 리스트를 순회하며 화면에 두더지 그리기
    for mole in moles:
        screen.blit(mole_img, mole)

    screen.blit(time_text, (680, 55))
    screen.blit(score_text, (55, 55))

    # ===========================================================================
    # TODO 13. 제한 시간에 따라 성공이나 실패를 구분할 수 있도록 (...) 안에 적절한 코드를 작성해 주세요.
    if (...) >= limit_time:
        if (...) >= target_score:
            print("성공")
        else:
            print("실패")

        pg.display.update()
        pg.time.wait(3000)
        break

    pg.display.update()

pg.quit()